/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UnityNFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allNFTContracts"
      | "createNFTCollection"
      | "getAllNFTCollections"
      | "getUserNFTCollections"
      | "userNFTs"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NFTCollectionCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allNFTContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTCollection",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNFTCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNFTCollections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userNFTs",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allNFTContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNFTCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNFTCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNFTs", data: BytesLike): Result;
}

export namespace NFTCollectionCreatedEvent {
  export type InputTuple = [owner: AddressLike, nftContract: AddressLike];
  export type OutputTuple = [owner: string, nftContract: string];
  export interface OutputObject {
    owner: string;
    nftContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UnityNFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): UnityNFTFactory;
  waitForDeployment(): Promise<this>;

  interface: UnityNFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allNFTContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createNFTCollection: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "nonpayable"
  >;

  getAllNFTCollections: TypedContractMethod<[], [string[]], "view">;

  getUserNFTCollections: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  userNFTs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allNFTContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createNFTCollection"
  ): TypedContractMethod<[name: string, symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllNFTCollections"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserNFTCollections"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "userNFTs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "NFTCollectionCreated"
  ): TypedContractEvent<
    NFTCollectionCreatedEvent.InputTuple,
    NFTCollectionCreatedEvent.OutputTuple,
    NFTCollectionCreatedEvent.OutputObject
  >;

  filters: {
    "NFTCollectionCreated(address,address)": TypedContractEvent<
      NFTCollectionCreatedEvent.InputTuple,
      NFTCollectionCreatedEvent.OutputTuple,
      NFTCollectionCreatedEvent.OutputObject
    >;
    NFTCollectionCreated: TypedContractEvent<
      NFTCollectionCreatedEvent.InputTuple,
      NFTCollectionCreatedEvent.OutputTuple,
      NFTCollectionCreatedEvent.OutputObject
    >;
  };
}
